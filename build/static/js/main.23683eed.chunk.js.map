{"version":3,"sources":["components/Header.js","helpers.js","components/Order.js","components/AddFishForm.js","components/EditFishForm.js","components/Inventory.js","sample-fishes.js","components/Fish.js","base.js","components/App.js","components/StorePicker.js","components/NotFound.js","components/Router.js","index.js"],"names":["Header","tagline","className","prototype","PropTypes","string","isRequired","formatPrice","cents","toLocaleString","style","currency","rando","arr","Math","floor","random","length","getFunName","adjectives","Order","renderOrder","key","fish","props","fishes","count","order","isAvailable","status","transitionOptios","classNames","timeout","enter","exit","CSSTransition","TransitionGroup","component","name","price","onClick","removeFromOrder","orderIDs","Object","keys","this","total","reduce","prevTotal","map","React","Component","object","func","AddFishForm","nameRef","createRef","priceRef","statusRef","descRef","imageRef","createFish","event","preventDefault","current","value","parseFloat","desc","image","addFish","currentTarget","reset","onSubmit","ref","type","placeholder","EditFishForm","static","shape","number","index","updateFish","handlechange","updatedFish","console","log","onChange","deleteFish","Inventory","loadSampleFishes","fish1","fish2","fish3","fish4","fish5","fish6","fish7","fish8","fish9","Fish","handleClick","addToOrder","details","src","alt","disabled","firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","base","Rebase","createClass","database","App","state","Date","now","setState","sampleFishes","params","match","localStorageRef","localStorage","getItem","storeId","JSON","parse","syncState","context","setItem","stringify","removeBinding","StorePicker","myInput","goToStore","storeName","history","push","required","defaultValue","NotFound","Router","exact","path","render","document","querySelector"],"mappings":"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","file":"static/js/main.23683eed.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Header = ({ tagline}) => (\n  <header className='top'>\n    <h1>\n      Catch\n      <span className='ofThe'>\n        <span className='of'>of</span>\n        <span className='the'>the</span>\n      </span>\n      Day\n    </h1>\n    <h3 className='tagline'>\n      <span>\n        {tagline}\n      </span>\n    </h3>\n  </header>\n);\n\nHeader.prototype = {\n  tagline: PropTypes.string.isRequired\n}\n\n// class Header extends React.Component {\n//   render() {\n//     return (\n//       <header className='top'>\n      \n//         <h1>\n//           Catch\n//           <span className='ofThe'>\n//             <span className='of'>of</span>\n//             <span className='the'>the</span>\n//           </span>\n//           Day\n//         </h1>\n//         <h3 className='tagline'>\n//           <span>{this.props.tagline}</span>\n//         </h3>\n//       </header>\n//     );\n//   }\n// }\n\nexport default Header;\n","export function formatPrice(cents) {\n  return (cents / 100).toLocaleString(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\"\n  });\n}\n\nexport function rando(arr) {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n\nexport function slugify(text) {\n  return text\n    .toString()\n    .toLowerCase()\n    .replace(/\\s+/g, \"-\")\n    .replace(/[^\\w-]+/g, \"\")\n    .replace(/--+/g, \"-\")\n    .replace(/^-+/, \"\")\n    .replace(/-+$/, \"\");\n}\n\nexport function getFunName() {\n  const adjectives = [\n    \"adorable\",\n    \"beautiful\",\n    \"clean\",\n    \"drab\",\n    \"elegant\",\n    \"fancy\",\n    \"glamorous\",\n    \"handsome\",\n    \"long\",\n    \"magnificent\",\n    \"old-fashioned\",\n    \"plain\",\n    \"quaint\",\n    \"sparkling\",\n    \"ugliest\",\n    \"unsightly\",\n    \"angry\",\n    \"bewildered\",\n    \"clumsy\",\n    \"defeated\",\n    \"embarrassed\",\n    \"fierce\",\n    \"grumpy\",\n    \"helpless\",\n    \"itchy\",\n    \"jealous\",\n    \"lazy\",\n    \"mysterious\",\n    \"nervous\",\n    \"obnoxious\",\n    \"panicky\",\n    \"repulsive\",\n    \"scary\",\n    \"thoughtless\",\n    \"uptight\",\n    \"worried\"\n  ];\n\n  const nouns = [\n    \"women\",\n    \"men\",\n    \"children\",\n    \"teeth\",\n    \"feet\",\n    \"people\",\n    \"leaves\",\n    \"mice\",\n    \"geese\",\n    \"halves\",\n    \"knives\",\n    \"lives\",\n    \"elves\",\n    \"loaves\",\n    \"potatoes\",\n    \"tomatoes\",\n    \"cacti\",\n    \"foci\",\n    \"fungi\",\n    \"nuclei\",\n    \"syllabuses\",\n    \"analyses\",\n    \"diagnoses\",\n    \"oases\",\n    \"theses\",\n    \"crises\",\n    \"phenomena\",\n    \"criteria\",\n    \"data\"\n  ];\n\n  return `${rando(adjectives)}-${rando(adjectives)}-${rando(nouns)}`;\n}\n","import React from \"react\";\nimport { formatPrice } from \"../helpers\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\"; \nimport PropTypes from \"prop-types\";\n\n\n\nclass Order extends React.Component {\n  static props = {\n    fishes: PropTypes.object,\n    order: PropTypes.object,\n    removeFromOrder: PropTypes.func,\n    \n  };\n\n  // make render function in case your render has too much code\n  renderOrder = (key) => {\n    // grab the fish you are looping over\n    const fish = this.props.fishes[key];\n    // know how many you bought\n    const count = this.props.order[key];\n    const isAvailable = fish && fish.status === \"available\";\n    const transitionOptios = {\n      classNames: \"order\",\n      key,\n      timeout: { enter: 550, exit: 550 },\n    };\n\n    //maake sure the fish is loaded before we continue\n    if (!fish) return null;\n\n    if (!isAvailable) {\n      <CSSTransition {...transitionOptios}>\n        return (\n        <li key={key}>Sorry {fish ? fish.name : \"fish\"} is not available</li>\n        );{\" \"}\n      </CSSTransition>;\n    } else {\n      return (\n        <CSSTransition {...transitionOptios}>\n          <li key={key}>\n            <span>\n              <TransitionGroup component='span' className='count'>\n                <CSSTransition\n                  classNames='count'\n                  key={count}\n                  timeout={{ enter: 5000, exit: 5000 }}\n                >\n                  <span>{count}</span>\n                </CSSTransition>\n              </TransitionGroup>\n              lbs {fish.name}\n              {formatPrice(count * fish.price)}\n              <button onClick={() => this.props.removeFromOrder(key)}>\n                &times;\n              </button>\n            </span>\n          </li>\n        </CSSTransition>\n      );\n    }\n  };\n  render() {\n    // first thing you need here is an array of order IDs:\n    const orderIDs = Object.keys(this.props.order);\n    // runing reduce because I need one total value at the end\n    const total = orderIDs.reduce((prevTotal, key) => {\n      // grab the fish you are looping over\n      const fish = this.props.fishes[key];\n      // know how many you bought\n      const count = this.props.order[key];\n      // boolean to know if that fish is available\n      // check is there is a fish (it was not deleted) and its status is available\n      const isAvailable = fish && fish.status === \"available\";\n      if (isAvailable) {\n        return prevTotal + count * fish.price;\n      }\n      return prevTotal;\n    }, 0);\n\n    return (\n      <div className='order-wrap'>\n        <h2> Your Order</h2>\n        <TransitionGroup component='ul' className='order'>\n          {orderIDs.map(this.renderOrder)}\n        </TransitionGroup>\n\n        <div className='total'>\n          Total: <strong> {formatPrice(total)}</strong>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Order;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass AddFishForm extends React.Component {\n  // ref is the way to refer to an element inside of jsx\n  // and as in my case get the value of an input\n  nameRef = React.createRef();\n  priceRef = React.createRef();\n  statusRef = React.createRef();\n  descRef = React.createRef();\n  imageRef = React.createRef();\n\n  static propTypes = {\n    addToOrder: PropTypes.func\n  };\n\n  createFish = (event) => {\n    // stop the page rom reloading\n    event.preventDefault();\n    // storing data from the form in an object\n    const fish = {\n      name: this.nameRef.current.value,\n      price: parseFloat(this.priceRef.current.value),\n      status: this.statusRef.current.value,\n      desc: this.descRef.current.value,\n      image: this.imageRef.current.value,\n    };\n\n    // apply the method from App.js on your fish you created -> pass the fish object to it\n    this.props.addFish(fish);\n    // refresh the form: (clears out the form fields)\n    event.currentTarget.reset();\n  };\n\n  render() {\n    return (\n      <form className='fish-edit' onSubmit={this.createFish}>\n        <input\n          className=' name '\n          ref={this.nameRef}\n          type='text'\n          placeholder='Name'\n        ></input>\n        <input\n          className=' price'\n          ref={this.priceRef}\n          type='text'\n          placeholder='Price'\n        ></input>\n        <select className='status' ref={this.statusRef}>\n          <option value='available'> Fresh!</option>\n          <option value='unavailable'> Sold Out!</option>\n        </select>\n        <textarea\n          className='desc'\n          ref={this.descRef}\n          placeholder='Desc'\n        ></textarea>\n        <input\n          className='image'\n          ref={this.imageRef}\n          type='text'\n          placeholder='Image'\n        ></input>\n        <button type='submit'> + Add Fish</button>\n      </form>\n    );\n  }\n}\n\nexport default AddFishForm;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass EditFishForm extends React.Component {\n  static = {\n    fish: PropTypes.shape({\n      image: PropTypes.string,\n      name: PropTypes.string,\n      desc: PropTypes.string,\n      status: PropTypes.string,\n      price: PropTypes.number,\n    }),\n    index: PropTypes.string,\n    updateFish: PropTypes.func,\n  };\n\n  handlechange = (event) => {\n    // update that fish\n    // 1. take a copy of the current fish\n    const updatedFish = {\n      ...this.props.fish,\n      // 2. overwriting one thing that changed -> new feature qith square brackets\n      [event.currentTarget.name]: event.currentTarget.value,\n    };\n    console.log(updatedFish);\n    // 3. now send the updated fish to the App component updateFish method\n    this.props.updateFish(this.props.index, updatedFish);\n  };\n\n  render() {\n    return (\n      <div className='fish-edit'>\n        <input\n          type='text'\n          name='name'\n          // to make typing in inventory possible, I listen to changes in the field\n          onChange={this.handlechange}\n          value={this.props.fish.name}\n        />\n        <input\n          type='text'\n          name='price'\n          onChange={this.handlechange}\n          value={this.props.fish.price}\n        />\n        <select\n          type='text'\n          name='status'\n          onChange={this.handlechange}\n          value={this.props.fish.status}\n        >\n          <option value='available'>Fresh!</option>\n          <option value='unavailable'>Sold Out!</option>\n        </select>\n        <textarea\n          name='desc'\n          onChange={this.handlechange}\n          value={this.props.fish.desc}\n        />\n        <input\n          type='text'\n          name='image'\n          onChange={this.handlechange}\n          value={this.props.fish.image}\n        />\n        <button onClick={() => this.props.deleteFish(this.props.index)}>\n          Remove Fish\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default EditFishForm;\n\n","import React from \"react\";\nimport AddFishForm from \"./AddFishForm\";\nimport PropTypes from \"prop-types\";\nimport EditFishForm from \"./EditFishForm\";\n\nclass Inventory extends React.Component {\nstatic props ={\n  fishes: PropTypes.object,\n  updateFish: PropTypes.func,\n  deleteFish: PropTypes.func,\n  loadSampleFishes: PropTypes.func\n}\n\n\n\n  render() {\n   \n    return (\n      <div className='inventory'>\n        <h2>Inventory</h2>\n        {/* For each fish in our inventory, render an EditFish Component */}\n        {Object.keys(this.props.fishes).map((key) => (\n          <EditFishForm\n            deleteFish={this.props.deleteFish}\n            key={key}\n            fish={this.props.fishes[key]}\n            updateFish={this.props.updateFish}\n            index={key}\n          />\n        ))}\n\n        {/* // sending function addFish which was created in the App.js\n        we dont renedr AppFishForm in App.js - thats why sending via Inventory */}\n        <AddFishForm addFish={this.props.addFish} />\n        <button className='fish-edit' onClick={this.props.loadSampleFishes}>\n          Load Samples\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Inventory;\n","// This is just some sample data so you don't have to think of your own!\nconst fishes = {\n  fish1: {\n    name: \"Pacific Halibut\",\n    image: \"/images/hali.jpg\",\n    desc:\n      \"Everyone’s favorite white fish. We will cut it to the size you need and ship it.\",\n    price: 1724,\n    status: \"available\"\n  },\n\n  fish2: {\n    name: \"Lobster\",\n    image: \"/images/lobster.jpg\",\n    desc:\n      \"These tender, mouth-watering beauties are a fantastic hit at any dinner party.\",\n    price: 3200,\n    status: \"available\"\n  },\n\n  fish3: {\n    name: \"Sea Scallops\",\n    image: \"/images/scallops.jpg\",\n    desc:\n      \"Big, sweet and tender. True dry-pack scallops from the icey waters of Alaska. About 8-10 per pound\",\n    price: 1684,\n    status: \"unavailable\"\n  },\n\n  fish4: {\n    name: \"Mahi Mahi\",\n    image: \"/images/mahi.jpg\",\n    desc:\n      \"Lean flesh with a mild, sweet flavor profile, moderately firm texture and large, moist flakes. \",\n    price: 1129,\n    status: \"available\"\n  },\n\n  fish5: {\n    name: \"King Crab\",\n    image: \"/images/crab.jpg\",\n    desc:\n      \"Crack these open and enjoy them plain or with one of our cocktail sauces\",\n    price: 4234,\n    status: \"available\"\n  },\n\n  fish6: {\n    name: \"Atlantic Salmon\",\n    image: \"/images/salmon.jpg\",\n    desc:\n      \"This flaky, oily salmon is truly the king of the sea. Bake it, grill it, broil it...as good as it gets!\",\n    price: 1453,\n    status: \"available\"\n  },\n\n  fish7: {\n    name: \"Oysters\",\n    image: \"/images/oysters.jpg\",\n    desc: \"A soft plump oyster with a sweet salty flavor and a clean finish.\",\n    price: 2543,\n    status: \"available\"\n  },\n\n  fish8: {\n    name: \"Mussels\",\n    image: \"/images/mussels.jpg\",\n    desc:\n      \"The best mussels from the Pacific Northwest with a full-flavored and complex taste.\",\n    price: 425,\n    status: \"available\"\n  },\n\n  fish9: {\n    name: \"Jumbo Prawns\",\n    image: \"/images/prawns.jpg\",\n    desc:\n      \"With 21-25 two bite prawns in each pound, these sweet morsels are perfect for shish-kabobs.\",\n    price: 2250,\n    status: \"available\"\n  }\n};\n\nexport default fishes;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {formatPrice} from '../helpers';\n\nclass Fish extends React.Component {\n// defining propTypes for all props\nstatic propTypes ={\ndetails: PropTypes.shape({\n  image: PropTypes.string,\n  name:PropTypes.string,\n  desc: PropTypes.string,\n  status: PropTypes.string,\n  price: PropTypes.number\n\n}),\naddToOrder: PropTypes.func\n\n}\n\n\n  // upon the click the addToOrder function is fired \nhandleClick = () => {\n    this.props.addToOrder(this.props.index)\n} \n\n\n  render() {\n    // use jsx destructuring \n    const {image, status, name, desc, price} = this.props.details;\n    const isAvailable = status === 'available';\n    return (\n      <li className='menu-fish'>\n        <img src={image} alt={name} />\n        <h3 className='fish-name'>{name}</h3>\n        <span className='price'>{formatPrice(price)}</span>\n        <p> {desc}</p>\n        <span className='status'>{status}</span>\n        <button  onClick={this.handleClick} disabled={!isAvailable}>{isAvailable ? 'Add to Cart' : 'Sold Out!'}</button>\n    \n      </li>\n    );\n  }\n}\n\n// add to Cart button -> handleClick -> passes index to addToOrder \n// function in the App.js which in its turn sets the new state of the order\nexport default Fish;\n","\nimport Rebase from \"re-base\";\nimport firebase from \"firebase/app\";\n\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/database\";\nconst firebaseApp = firebase.initializeApp({\n  apiKey: \"AIzaSyAaO5ousnXKEUyC_FADbnGRQljSIf8V3z0\",\n  authDomain: \"catch-of-the-day-store-e501f.firebaseapp.com\",\n  databaseURL: \"https://catch-of-the-day-store-e501f-default-rtdb.firebaseio.com\",\n  projectId: \"catch-of-the-day-store-e501f\",\n  storageBucket: \"catch-of-the-day-store-e501f.appspot.com\",\n  messagingSenderId: \"1012851551651\",\n  appId: \"1:1012851551651:web:d320c047ffc303b2397e16\",\n  measurementId: \"G-LN48N00T9L\"\n});\n\n// database is a functionthat will return an actual database that we have \nconst base = Rebase.createClass(firebaseApp.database());\n// This is a named export\nexport { firebaseApp };\n// this is a default export\nexport default base;","\nimport React from \"react\"; \nimport Header from \"./Header\"\nimport Order from \"./Order\";\nimport Inventory from \"./Inventory\";\nimport sampleFishes from \"../sample-fishes\";\nimport Fish from \"./Fish\";\nimport base from '../base';\nimport PropTypes from \"prop-types\";\n\n\n\nclass App extends React.Component {\n  state = {\n    fishes: {},\n    order: {},\n  };\n\n  static PropTypes ={ \n    match: PropTypes.object\n  }\n\n  componentDidMount() {\n    const { params } = this.props.match;\n    // reinstate localStorage\n    const localStorageRef = localStorage.getItem(params.storeId);\n    // if there is a localstorage string set the state to it\n    //and parse it into an object (opposite from stringify)\n    if (localStorageRef) {\n      this.setState({ order: JSON.parse(localStorageRef) });\n    }\n\n    // synchronizing the store with the database\n    // whatever store id is geenrated, it is synchronized with database\n    this.ref = base.syncState(`${params.storeId}/fishes`, {\n      context: this,\n      // fishes is the state that is going to be sinked\n      state: \"fishes\",\n    });\n  }\n\n  // storing order data to local storage with the help of\n  // componentDidUpdate\n\n  componentDidUpdate() {\n    console.log(this.state.order);\n    // stick the order for the specific store in the local storage\n    // the value is now sent as an object. We need to convert it into string using JSON stringify\n    localStorage.setItem(\n      this.props.match.params.storeId,\n      JSON.stringify(this.state.order)\n    );\n  }\n\n  // another life cycle method\n  // remove binding to database once i leave the page\n  // to clean up memory issues and to avaid data leak\n\n  componentWillUnmount() {\n    base.removeBinding(this.ref);\n  }\n\n  addFish = (fish) => {\n    //1. take a copy of the exsisting state (using object spread ...)\n    const fishes = { ...this.state.fishes };\n    // 2. then you add your new fish to that fishes and give it a unique id with a date\n    // fishes is euqal to the fish that got passed in\n    // inserting the new fish to the fishes  with a certain id (date)\n    fishes[`fish${Date.now()}`] = fish;\n    // 3. set the new fishes object to state:\n    this.setState({\n      fishes: fishes,\n    });\n  };\n\n  updateFish = (key, updatedFish) => {\n    //1. take a copy of the current state\n    const fishes = { ...this.state.fishes };\n    //2. update that state\n    fishes[key] = updatedFish;\n    // 3. setthat to state\n    this.setState({ fishes });\n    // finally, send this method to inventtory component\n    // and from there to EditFishForm component\n  };\n\n  // deleting a fish\n  deleteFish = (key) => {\n    //1. take a copy of state\n    const fishes = { ...this.state.fishes };\n    //2. update the state\n    fishes[key] = null;\n    //3. update state\n    this.setState({ fishes });\n  };\n\n  loadSampleFishes = () => {\n    this.setState({ fishes: sampleFishes });\n  };\n  // index (key) is first generated from the array here (Object.keys), then sent\n  //to Fish Compoennt where this funciton is fired and from there sent to here again\n  // from here it is pushed into state above\n  // and that state is sent via props to Order - Component\n  addToOrder = (key) => {\n    //1. take a copy of the exsisting state (using object spread ...)\n    const order = { ...this.state.order };\n    // 2 either add to the order or update the number\n    order[key] = order[key] + 1 || 1;\n    // 3. set the new state:\n    this.setState({ order });\n  };\n\n  removeFromOrder = (key) => {\n    const order = { ...this.state.order };\n    delete order[key] ;\n    this.setState({ order });\n  };\n\n  render() {\n    return (\n      <div className='catch-of-the-day'>\n        <div className='menu'>\n          <Header tagline='Fresh Daily'/>\n          <ul className='fishes'>\n            {/* So: you set the state of fishes to the sample fishes \n            here with Object.key you turn the state into array and assign a key to each element \n            then you take each of those elements and map through it \n            there is no real function after map but an implicit return -> FishComponent is being returned\n             for every element of the array */}\n\n            {Object.keys(this.state.fishes).map((key) => (\n              <Fish\n                addToOrder={this.addToOrder}\n                key={key}\n                index={key}\n                details={this.state.fishes[key]}\n              />\n            ))}\n          </ul>\n        </div>\n        <Order\n          fishes={this.state.fishes}\n          order={this.state.order}\n          removeFromOrder={this.removeFromOrder}\n        />\n        <Inventory\n          loadSampleFishes={this.loadSampleFishes}\n          addFish={this.addFish}\n          updateFish={this.updateFish}\n          deleteFish={this.deleteFish}\n          fishes={this.state.fishes}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;","\nimport React from 'react'; \nimport {getFunName} from '../helpers';\n\nclass StorePicker extends React.Component {\n\n\n\n  myInput = React.createRef(); // creatin a ref\n\ngoToStore = (event) => {\n    // 1. stop the page from reloading \n    event.preventDefault (); \n  // 2. get the text from the input \n  const storeName= this.myInput.current.value;\n  //3. push it to Router to change the page to /store/input-whateva \n  // you are pushing it into the history-prop which Router/Component has\n  this.props.history.push(`/store/${storeName}`);\n}\n\n  render() {\n    return (\n      <form className='store-selector' onSubmit={this.goToStore}>\n        <h2>Please select a store</h2>\n        <input\n          type='text'\n          ref={this.myInput} // ref allow you to refernce a dom node \n          required\n          placeholder='Store name'\n          defaultValue={getFunName()}\n        ></input>\n        <button type='submit'>Visit Store →</button>\n      </form>\n    );\n  }\n}\n\nexport default StorePicker;","import React from \"react\";\n\nconst NotFound = () => (\n<div> \n    <h2>Not Found!!1!</h2>\n</div>\n\n)\n\nexport default NotFound; ","import React from 'react';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport App from './App';\nimport StorePicker from './StorePicker';\nimport NotFound  from './NotFound';\n\n\nconst Router = () => (\n  <BrowserRouter>\n    <Switch>\n      {/* All the routes will be stored here */}\n      {/* After a slash render a StorePicker */}\n      <Route exact path='/' component={StorePicker} />\n      {/* After that render an App  */}\n      <Route path='/store/:storeid' component={App} />\n      <Route component={NotFound} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Router;","import React from 'react'; \nimport { render } from 'react-dom';\n\nimport Router from './components/Router';\nimport \"./css/style.css\";\n\nrender(<Router/>, document.querySelector(\"#main\"));"],"sourceRoot":""}